{
    "contents" : "#Package: mc\n#Title: Commonly used functions for Nutriomique Team (INSERM U872)\n#Version: 0.1\n#Date: 2013-06-14\n#Author: Aurelie Cotillard, Edi Prifti, Hoai Tuong Nguyen (A-Z order)\n#Maintainer: Hoai Tuong Nguyen <hoai-tuong.nguyen@inserm.fr>\n#Description: Statistical and datamining tools for metagenomic data analysis.\n#License: PPL\n\n#Examples\nif(FALSE){\n  \n  #load \"mc\" package\n  library(mc)\n  \n  #load \"xtable\" package, automatically install the package if it does not exist, then load it\n  library.mc(\"xtable\")\n  \n  #read a large file\n  data<-read.table.mc(\"http://statistics.vn/data/doesgenes.txt\",header=T,sep=\";\",nrow=1000)\n  \n  #get statistics on the columns of a matrix/data.frame and export the results as table to Latex codes\n  attach(mtcars)\n  sum<-summary.numeric.mc(mtcars,latex=T)\n  \n  #test the normality of a (list of) numeric variable(s)\n  attach(mtcars)\n  normality.mc(mtcars)\n  \n  #get class type for a (list of) variable(s)\n  attach(mtcars)\n  class.mc(mtcars)\n  \n  #plot the correlation, add lowess line to plot and write the output\n  output.dir=\"../results\"\n  attach(swiss)\n  reg.plot.mc(Fertility,Agriculture,\n              type=\"lowess\",\n              pch=ifelse(swiss$Examination>10, 0, 1),         \n              subjects=as.vector(rownames(swiss)),\n              title=\"CORRELATION - LOWESS\",\n              xlab=\"Fertility\",ylab=\"Agriculture\",\n              legend.topright=list(title=\"SHAPE\",pch=c(1,0),label=c(\"Examination>10\",\"Examination<=10\"),\n                                   col=c(\"black\",\"black\")),\n              imgfile=sprintf(\"%s/lw_swiss-Fertility-Agriculture.pdf\",output.dir),\n              pointsfile=sprintf(\"%s/lw_swiss-Fertility-Agriculture.csv\",output.dir))  \n  \n  #draw a boxplot for two classes, add results of t-test to plot, write the output\n  output.dir=\"../results\"\n  attach(lung)\n  pdf(sprintf(\"%s/lung_factors_by_sex_boxplot.pdf\",output.dir))\n  outfile<-sprintf(\"%s/lung_factors_by_sex_t-test.csv\",output.dir)\n  par(mfrow = c(4, 4))\n  lapply(c(1:4,6:10),function(x) boxplot.class.mc(data=lung,x,\n                                                  class=lung$sex,\n                                                  xlab=\"Sex (0=Female, 1=Male)\",\n                                                  outfile=outfile))\n  dev.off()\n  \n  \n}\n\n\n\n#'@name check.installed.mc\n#'@aliases check.installed.mc\n#'@export check.installed.mc\n#'@docType methods\n#'@title Checking package installation\n#'@description Check whether a packages is installed\n#'@param pkg name of package\n#'@return A logical value indicating whether the package is installed\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'check.installed.mc(\"xtable\")\n#'@seealso \\code{\\link[utils]{install.packages}}\ncheck.installed.mc<-function(pkg){\n  return(is.element(pkg, installed.packages()[,1]))\n}\n\n\n\n#'@name library.mc\n#'@aliases library.mc\n#'@export library.mc\n#'@docType methods\n#'@title Loading and Listing of Packages\n#'@description On-the-fly load or install a package\n#'@param pkg name of package\n#'@return A list of attached packages\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'check.installed.mc(\"xtable\")\n#'@seealso \\code{\\link[utils]{install.packages}}\nlibrary.mc<-function(pkg){\n  if(!check.installed.mc(pkg))\n    install.packages(pkg)\n  library(pkg,character.only=TRUE)\n}\n\n\n\n#Load dependencies\nlibrary.mc(\"xtable\")\nlibrary.mc(\"Hmisc\")\n\n#'@name read.table.mc\n#'@aliases read.table.mc\n#'@export read.table.mc\n#'@docType methods\n#'@title Data Input\n#'@description Read a very large data file\n#'@param file the name of the file which the data are to be read from.\n#'@param header a logical value indicating whether the file contains the names of the variables as its first line. If missing, the value is determined from the file format: header is set to TRUE if and only if the first row contains one fewer field than the number of columns.\n#'@param sep  the field separator character. Values on each line of the file are separated by this character. If sep = \"\" (the default for read.table) the separator is 'white space', that is one or more spaces, tabs, newlines or carriage returns. A (character) name of the column in a \\code{\\link[base]{data.frame}} which contains the addresses\n#'@param nrow number of rows\n#'@return A data frame (\\code{\\link[base]{data.frame}}) containing a representation of the data in the file\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'library(mc)\n#'data<-read.table.mc(\"http://statistics.vn/data/doesgenes.txt\",header=T,sep=\";\",nrow=1000)\n#'@seealso \\code{\\link[utils]{read.table}}\nread.table.mc<-function(file,header=FALSE,sep=\"\",nrow=-1){\n  #read 5 first rows to get class names of column\n  tab5rows <- read.table(file, nrows = 5,sep=sep)\n  #get class names\n  classes <- sapply(tab5rows, class)\n  #get data frame with specific parameter\n  tabAll <- read.table(file,  header=header, colClasses=classes,sep=sep,nrows=nrow,comment.char = \"\")\n  return(tabAll)\n}\n\n\n\n#'@name summary.numeric.mc\n#'@aliases summary.numeric.mc\n#'@export summary.numeric.mc\n#'@docType methods\n#'@title Object Summaries\n#'@description Summarize an numeric table, save the output to a table, export the output to Latex code\n#'@param object an object for which a summary is desired.\n#'@param latex a logical value indicating whether output to latex is called\n#'@return Table of of the value returned by summary (and output Latex code if parameter 'latex' is TRUE)\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'data(mtcars)\n#'sum<-summary.numeric.mc(mtcars,latex=T)\n#'@seealso \\code{\\link[base]{summary}}\nsummary.numeric.mc<-function(object,latex=FALSE){\n  #get classes of columns\n  classes<-sapply(1:ncol(object), function(x) class(object[,x]))\n  #get summaries for numeric columns\n  summary.numeric<-sapply(which(classes==\"numeric\"), function(x) as.vector(summary(object[,x]))) \n  #transform summaries into table format\n  if (length(which(is.na(object)))>0){\n    summary.numeric<-sapply(which(classes==\"numeric\"), function(x) as.vector(summary(object[,x]))) \n    tmp <- object.frame()\n    for(i in seq(along=summary.numeric)) for(j in 1:length(summary.numeric[[i]]))\n      tmp[i,j] <- ifelse(is.na(summary.numeric[[i]][j]),\"0\",summary.numeric[[i]][j])\n    summary.numeric<-tmp\n    colnames(summary.numeric)<-c(names(summary(1)),\"NA\")\n    summary.numeric[which(is.na(summary.numeric[,7])),7]<-\"0\"    \n  } else {\n    summary.numeric<-t(data.frame(sapply(which(classes==\"numeric\"), function(x) as.vector(summary(object[,x])))))\n    colnames(summary.numeric)<-names(summary(1))\n  }\n  rownames(summary.numeric)<-colnames(object)[which(classes==\"numeric\")]\n  #export table into Latex code\n  if(latex){\n    print(xtable(summary.numeric))\n  }\n  return(summary.numeric)\n}\n\n\n\n#'@name normality.mc\n#'@aliases normality.mc\n#'@export normality.mc\n#'@docType methods\n#'@title Normality Test\n#'@description Perform a normality test for variables \n#'@param m variable (list, matrix, data frame...)\n#'@param alpha p-value threshold\n#'@return logical value indicating whether variable is normally distributed\n#'@author Hoai Tuong Nguyen\n#'@examples\n#' attach(mtcars)\n#' normality.mc(mtcars)\nnormality.mc<-function(m,alpha=0.05){\n  if (class(m)==\"data.frame\" || class(m)==\"matrix\")\n    return(sapply(1:ncol(m), function(x) shapiro.test(m[,x])$p.value<=alpha))\n  else return(shapiro.test(m)$p.value<=alpha)\n}\n\n\n\n#'@name class.mc\n#'@aliases class.mc\n#'@export class.mc\n#'@docType methods\n#'@title Object Classes\n#'@description Get class of variable\n#'@param variable (list, matrix, data frame...)\n#'@return class of variables or of columns of matrix/data frame\n#'@author Hoai Tuong Nguyen\n#'@examples\n#' attach(mtcars)\n#' class.mc(mtcars)\nclass.mc<-function(m){\n  if (class(m)==\"data.frame\" || class(m)==\"matrix\")\n    return(sapply(1:ncol(m),function(x) class(m[,x])))\n  else return(class(m))\n}\n\n\n#'@name reg.plot.mc\n#'@aliases reg.plot.mc\n#'@export reg.plot.mc\n#'@docType methods\n#'@title X-Y Plotting\n#'@description Plot a pair of variables and add regression line (linear or lowess) to plot\n#'@param x a numeric vector \n#'@param y a numeric vector \n#'@param type type of regression line \n#'@param pch type points\n#'@param subjects list of labels for points\n#'@param title main title of plot\n#'@param xlab a title for the x axis\n#'@param ylab a title for the y axis\n#'@param col list of colors for points\n#'@param legend.topleft legend at the top-left of plot\n#'@param legend.topright legend at the top-right of plot\n#'@param imgfile image output filename\n#'@param pointsfile points output filename\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'output.dir=\"../results\"\n#'attach(swiss)\n#'reg.plot.mc(Fertility,Agriculture,\n#'            type=\"lowess\",\n#'            pch=ifelse(swiss$Examination>10, 0, 1),         \n#'            subjects=as.vector(rownames(swiss)),\n#'            title=\"CORRELATION - LOWESS\",\n#'            xlab=\"Fertility\",ylab=\"Agriculture\",\n#'            legend.topright=list(title=\"SHAPE\",pch=c(1,0),label=c(\"Examination>10\",\"Examination<=10\"),col=c(\"black\",\"black\")),\n#'            imgfile=sprintf(\"%s/lw_swiss-Fertility-Agriculture.pdf\",output.dir),\n#'            pointsfile=sprintf(\"%s/lw_swiss-Fertility-Agriculture.csv\",output.dir))\nreg.plot.mc<-function(x,y,type=\"lm\",pch,subjects=NULL,title=\"CORRELATION\",xlab=\"X\",ylab=\"Y\",col,legend.topleft,legend.topright,imgfile=NULL,pointsfile=NULL){\n  \n  #correlation\n  r=rcorr(x,y,type=\"pearson\")[[1]][1,2]\n  rho=rcorr(x,y,type=\"spearman\")[[1]][1,2]\n  \n  #output plot\n  if (!missing(imgfile))\n    pdf(file=imgfile)\n  \n  #colors of points\n  if (missing(col))\n    col=rep(\"black\",length(x),)\n  \n  #main plot\n  plot(x,y,pch=pch,main=sprintf(\"%s\\n%s vs %s \\nr=%0.4f; rho=%0.4f\",title,ylab,xlab,r,rho),xlab=xlab,ylab=ylab,col=col)\n  \n  #labels\n  text(x, y, subjects, cex=0.3,pos=1,offset=0.2)\n  \n  #Regression line\n  if (type==\"lowess\"){\n    lw<-lowess(x,y)\n    lines(lw,col=3)\n    up<-which(x>lw$x & y>lw$y)\n  } else if (type==\"lm\") {\n    lm<-lm(y~x)\n    abline(lm)\n    up<-which(y>fitted(lm))\n  }\n  \n  #Legend  \n  if (!missing(legend.topleft))\n    legend(\"topleft\", title=legend.topleft$title,pch=legend.topleft$pch, legend = legend.topleft$label, col = legend.topleft$col, cex=0.4)\n  if (!missing(legend.topright))\n    legend(\"topright\", title=legend.topright$title,pch=legend.topright$pch, legend = legend.topright$label, col = legend.topright$col, cex=0.4)\n  \n  \n  #output points\n  if (!missing(pointsfile)){\n    p<-rep(\"0\",length(x))\n    p[up]<-\"1\"\n    if (!missing(subjects))\n      write.table(rbind(c(\"Name\",xlab,ylab,\"Levels\"),cbind(subjects,x,y,p)),file=pointsfile,col.names=F,row.names=F,sep=\",\",quote=F)\n    else \n      write.table(rbind(c(xlab,ylab,\"Levels\"),cbind(x,y,p)),file=pointsfile,col.names=F,row.names=T,quote=F)\n  }\n  \n  #end of output plot\n  if (!missing(imgfile))\n    dev.off()\n  \n}\n\n\n\n#'@name boxplot.class.mc\n#'@aliases boxplot.class.mc\n#'@export boxplot.class.mc\n#'@docType methods\n#'@title Box Plots \n#'@description Draw a boxplot for a column of data frame\n#'@param data a data frame\n#'@param x index of column\n#'@param class vector of classes\n#'@param outfile output filename\n#'@author Hoai Tuong Nguyen\n#'@examples\n#'output.dir=\"../results\"\n#'attach(lung)\n#'pdf(sprintf(\"%s/lung_factors_by_sex_boxplot.pdf\",output.dir))\n#'outfile<-sprintf(\"%s/lung_factors_by_sex_t-test.csv\",output.dir)\n#'par(mfrow = c(4, 4))\n#'lapply(c(1:4,6:10),function(x) boxplot.class.mc(data=lung,x,\n#'                                                class=lung$sex,\n#'                                                xlab=\"Sex (0=Female, 1=Male)\",\n#'                                                outfile=outfile))\n#'dev.off()\nboxplot.class.mc<-function(data,x,type=\"auto\",class,xlab,ylab,outfile=NULL){\n  if(missing(ylab))\n    ylab=names(data)[x]\n  if(missing(xlab))\n    xlab=names(class)\n  boxplot(data[,x]~class,ylab=ylab,xlab=xlab) \n  if(type==\"t\")\n    t.res<-t.test(data[,x]~class,ylab=names(data)[x])\n  if(type==\"mwu\")\n    t.res<-wilcox.test(data[,x]~class,ylab=names(data)[x])\n  if(type==\"auto\")\n    if (shapiro.test(data[,x])$p.value<=0.05)\n      t.res<-t.test(data[,x]~class,ylab=names(data)[x])\n  else t.res<-wilcox.test(data[,x]~class,ylab=names(data)[x])\n  \n  title(main=sprintf(\"t=%0.2f; p=%0.2e\\n%s\",t.res$statistic,t.res$p.value,ifelse(t.res$p.value<=0.001,\"***\",ifelse(t.res$p.value<=0.01 & t.res$p.value>0.001,\"**\",ifelse(t.res$p.value<=0.05 & t.res$p.value>0.01,\"*\",\"\")))),cex=0.5)\n  if(!missing(outfile)){\n    out<-cbind(names(data)[x],t.res$statistic,t.res$p.value,\n               ifelse(t.res$p.value<=0.001,\"***\",ifelse(t.res$p.value<=0.01 & t.res$p.value>0.001,\"**\",ifelse(t.res$p.value<=0.05 & t.res$p.value>0.01,\"*\",\"\"))),\n               shapiro.test(data[,x])$p.value<=0.05)\n    write.table(out,outfile,col.names=F,row.names=F,append=T,quote=F,sep=\";\")\n  }   \n}\n\n\nindex<-function(k,m){\n  i=(k-1)%%m+1\n  j=(k-1)%/%m+1\n  return(list(i,j))\n}\n\n\n#A measure of correlation between nominal variables\nyule.Q=function(x,y){(table(x,y)[1,1]*table(x,y)[2,2]-table(x,y)[1,2]*table(\n  x,y)[2,1])/(table(x,y)[1,1]*table(x,y)[2,2]+table(x,y)[1,2]*table(x,y)[2,1])\n}\n\n",
    "created" : 1371140939752.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2866471487",
    "id" : "4C4241B8",
    "lastKnownWriteTime" : 1372689317,
    "path" : "~/metacardis/7.scripts/released/svn/mc-r/trunk/mc/R/mcLite.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}