{
    "contents" : "#########################################\n# gene_expression_funnet.R - analysis of genes expression based on classied subjects with Funnet\n# Author: Hoai Tuong Nguyen\n# Created: 05/07/2013\n# Modified: 12/07/2013\n# CMD: R --no-save --no-restore --slave -f gene_expression_funnet.R \"--args input.dir='?' output.dir='?'\"\n#########################################\n\n#First read and parse the arguments for on the fly run\nargs=(commandArgs(TRUE))\n\nfor(i in 1:length(args)){\n  eval(parse(text=args[[i]]))\n}\n\n\nlibrary(mc)\nlibrary(FunNet)\n\n\n#default working path for inner run\n#setwd(\"MetaCARDIS/\")\n#setwd(\"C:/Users/TUONG/Documents/metacardis/7.scripts/\")\n\n#default input and output paths\nif (!exists(\"input.dir\"))\n  input.dir=\"../1.data/metacardis\"\nif (!exists(\"output.dir\"))\n  output.dir=\"../3.results/CLASSIFICATION/Subjects/2013-06-17\"\n\ndir.create(output.dir, showWarnings = FALSE)\n\n\n#Modified version of Funnet\nfun<-function (wd = \"\", org = \"hsa\", two.lists = TRUE, up.frame = NULL, \n               down.frame = NULL, genes.frame = NULL, restrict = FALSE, \n               ref.list = NULL, logged = FALSE, discriminant = FALSE, go.bp = TRUE, \n               go.cc = TRUE, go.mf = TRUE, kegg = TRUE, annot.method = \"specificity\", \n               annot.details = TRUE, direct = FALSE, enriched = TRUE, fdr = NA, \n               build.annot.net = TRUE, coexp.matrix = NULL, coexp.method = \"spearman\", \n               estimate.th = FALSE, hard.th = NA, soft.th = NA, topological = FALSE, \n               keep.sign = FALSE, level = NA, annot.clust.method = \"umilds\", \n               annot.prox.measure = \"unilat.pond.norm.mean\", test.recovery = FALSE, \n               test.robust = FALSE, replace.annot = NA, random.annot = FALSE, \n               build.gene.net = FALSE, gene.clust.method = \"hclust\", gene.net.details = FALSE, \n               gene.clusters = NA, alpha = 0.05, RV = 0.9, sigma = NA, keep.rdata = FALSE, \n               zip = TRUE,fileprefix) \n{\n  if (org == \"HS\") {\n    org <- \"hsa\"\n  }\n  if (org == \"MM\") {\n    org <- \"mmu\"\n  }\n  if (org == \"RN\") {\n    org <- \"rno\"\n  }\n  if (org == \"SC\") {\n    org <- \"sce\"\n  }\n  parameter.list <- list(analysis.date = date(), package.version = .funnet.version, \n                         org = org, annot.date = annot.date, annot.method = annot.method, \n                         annot.clust.method = annot.clust.method, annot.prox.measure = annot.prox.measure, \n                         direct = direct, enriched = enriched, fdr = fdr, two.lists = two.lists, \n                         restrict = restrict, go.bp = go.bp, go.cc = go.cc, go.mf = go.mf, \n                         kegg = kegg, discriminant = discriminant, logged = logged, \n                         annot.details = annot.details, estimate.th = estimate.th, \n                         hard.th = hard.th, soft.th = soft.th, coexp.method = coexp.method, \n                         topological = topological, keep.sign = keep.sign, build.annot.net = build.annot.net, \n                         level = level, test.recovery = test.recovery, test.robust = test.robust, \n                         replace.annot = replace.annot, random.annot = random.annot, \n                         build.gene.net = build.gene.net, gene.clust.method = gene.clust.method, \n                         gene.clusters = gene.clusters, gene.net.details = gene.net.details, \n                         alpha = alpha, RV = RV, sigma = sigma, keep.rdata = keep.rdata, \n                         zip = zip)\n  .check.parameters(parameter.list, coexp.matrix, up.frame, \n                    down.frame, ref.list, genes.frame)\n  if (discriminant) {\n    two.lists <- TRUE\n    restrict <- TRUE\n  }\n  if (!is.null(up.frame) & !is.null(down.frame) & is.null(genes.frame)) {\n    two.lists <- TRUE\n  }\n  if (!is.null(genes.frame) & (is.null(up.frame) | is.null(down.frame))) {\n    two.lists <- FALSE\n    discriminant <- FALSE\n  }\n  cat(paste(\"\\n\\tFunNet started at: \", date(), sep = \"\"))\n  cat(paste(\"\\n\\t\\tUsing annotations updated on: \", annot.date, \n            sep = \"\"))\n  if (wd != \"\") {\n    setwd(wd)\n  }\n  results.dir <- paste(fileprefix,\"_\", format(Sys.time(), \"%Y_%b_%d_%H-%M-%S\"), \n                       sep = \"\")\n  dir.create(paste(getwd(), \"/\", results.dir, sep = \"\"))\n  dir.create(paste(getwd(), \"/\", results.dir, \"/html\", sep = \"\"))\n  dir.create(paste(getwd(), \"/\", results.dir, \"/images\", sep = \"\"))\n  try(write.table(as.matrix(print(parameter.list)), col.names = F, \n                  file = paste(getwd(), \"/\", results.dir, \"/\", \"parameters_list.txt\", \n                               sep = \"\"), sep = \"\\t\"))\n  wd <- getwd()\n  locus.name <- annot.base[[org]]$locus.name[, 1:2]\n  locus.symbol <- annot.base[[org]]$locus.name[, c(1, 3)]\n  rownames(locus.name) <- locus.name[, 1]\n  rownames(locus.symbol) <- locus.symbol[, 1]\n  if (two.lists) {\n    up.down <- .filter.genes(up.frame = up.frame, down.frame = down.frame, \n                             two.lists = TRUE, locus.name = locus.name, logged = logged)\n    up.frame <- up.down$up.frame\n    down.frame <- up.down$down.frame\n    rm(up.down)\n    if (discriminant) {\n      ref.list <- c(as.character(up.frame[, 1]), as.character(down.frame[,1]))\n    }\n    else if (restrict & !discriminant) {\n      ref.list <- .filter.genes(restrict = TRUE, ref.list = ref.list, \n                                locus.name = locus.name)\n    }\n    else if (!restrict & !discriminant) {\n      ref.list <- NULL\n    }\n  }\n  else {\n    genes.frame <- .filter.genes(genes.frame = genes.frame, \n                                 two.lists = FALSE, locus.name = locus.name)\n    if (restrict) {\n      ref.list <- .filter.genes(restrict = TRUE, ref.list = ref.list, \n                                locus.name = locus.name)\n    }\n    else {\n      ref.list <- NULL\n    }\n  }\n  cat(paste(\"\\n\\tSaving start-up environment... \", format(Sys.time(), \n                                                          \"%X\"), sep = \"\"))\n  save(up.frame, down.frame, ref.list, genes.frame, parameter.list, \n       coexp.matrix, locus.name, file = paste(getwd(), \"/\", \n                                              results.dir, \"/\", \"start-up_environment.RData\", sep = \"\"), \n       compress = T)\n  save(up.frame, down.frame, ref.list, genes.frame, parameter.list, \n       coexp.matrix, locus.name, file = paste(getwd(), \"/\", \n                                              \"start-up_environment.RData\", sep = \"\"), compress = T)\n  if (estimate.th) {\n    datas <- NULL\n    if (!is.null(up.frame) & !is.null(down.frame)) {\n      datas <- rbind(up.frame, down.frame)\n    }\n    if (!is.null(genes.frame) & (is.null(up.frame) | is.null(down.frame))) {\n      datas <- genes.frame\n    }\n    rownames(datas) <- datas[, 1]\n    datas <- datas[, 2:ncol(datas)]\n    cat(\"\\n\\tHard thresholding...\\n\")\n    try(hard.th <- .PickHardThreshold(datExpr1 = t(datas), \n                                      coexp.method = coexp.method))\n    try(write.table(hard.th$tablou, file = paste(getwd(), \n                                                 \"/\", results.dir, \"/\", coexp.method, \"_hard_threshold.txt\", \n                                                 sep = \"\"), append = FALSE, col.names = TRUE, , row.names = F, \n                    sep = \"\\t\"))\n    try(write(paste(\"\\n\\nHard threshold estimate: \", hard.th$estimate, \n                    \"\\n\", sep = \"\"), file = paste(getwd(), \"/\", results.dir, \n                                                  \"/\", coexp.method, \"_hard_threshold.txt\", sep = \"\"), \n              append = TRUE))\n    try(write(paste(\"Do not trust this automated estimation without checking it!\\n\", \n                    \"Do not hesitate to select another threshold depending on the associated connectivity values.\\n\", \n                    \"Then please restart FunNet interaction analysis with your selected threshold.\\n\", \n                    sep = \"\"), file = paste(getwd(), \"/\", results.dir, \n                                            \"/\", coexp.method, \"_hard_threshold.txt\", sep = \"\"), \n              append = TRUE))\n    cat(\"\\n\\tSoft thresholding...\\n\")\n    try(soft.th <- .PickSoftThreshold(datExpr1 = t(datas), \n                                      coexp.method = coexp.method))\n    try(write.table(soft.th$tablou, file = paste(getwd(), \n                                                 \"/\", results.dir, \"/\", coexp.method, \"_soft_threshold.txt\", \n                                                 sep = \"\"), append = FALSE, col.names = TRUE, , row.names = F, \n                    sep = \"\\t\"))\n    try(write(paste(\"\\n\\nSoft threshold estimate: \", soft.th$estimate, \n                    \"\\n\", sep = \"\"), file = paste(getwd(), \"/\", results.dir, \n                                                  \"/\", coexp.method, \"_soft_threshold.txt\", sep = \"\"), \n              append = TRUE))\n    try(write(paste(\"Do not trust this automated estimation without checking it!\\n\", \n                    \"Do not hesitate to select another threshold depending on the associated connectivity values.\\n\", \n                    \"Then please restart FunNet interaction analysis with your selected threshold.\\n\", \n                    sep = \"\"), file = paste(getwd(), \"/\", results.dir, \n                                            \"/\", coexp.method, \"_soft_threshold.txt\", sep = \"\"), \n              append = TRUE))\n    print(\"Estimation of the co-expression threshold finished!\")\n    print(\"Please restart FunNet with your chosen threshold.\")\n    if (!keep.rdata) {\n      try(unlink(paste(getwd(), \"/\", results.dir, \"/\", \n                       list.files(path = paste(getwd(), \"/\", results.dir, \n                                               \"/\", sep = \"\"), pattern = \"[:print:]*.RData\"), \n                       sep = \"\"), recursive = TRUE))\n    }\n    if (zip) {\n      try(unlink(paste(getwd(), \"/\", results.dir, \"/html\", \n                       sep = \"\"), recursive = TRUE))\n      try(unlink(paste(getwd(), \"/\", results.dir, \"/images\", \n                       sep = \"\"), recursive = TRUE))\n      try(system(command = paste(\"zip -r9q \", results.dir, \n                                 \".zip \", \"./\", results.dir, \"/*\", sep = \"\")))\n      try(unlink(paste(getwd(), \"/\", results.dir, sep = \"\"), \n                 recursive = TRUE))\n    }\n    options(show.error.messages = FALSE)\n    stop()\n  }\n  if (is.null(coexp.matrix) & (build.annot.net | build.gene.net)) {\n    cat(paste(\"\\n\\tComputing co-expression matrix... \", format(Sys.time(), \n                                                               \"%X\"), sep = \"\"))\n    datas <- NULL\n    if (!is.null(up.frame) & !is.null(down.frame)) {\n      datas <- rbind(up.frame, down.frame)\n    }\n    if (!is.null(genes.frame) & (is.null(up.frame) | is.null(down.frame))) {\n      datas <- genes.frame\n    }\n    rownames(datas) <- datas[, 1]\n    datas <- datas[, 2:ncol(datas)]\n    \n    if (coexp.method %in% c(\"spearman\", \"pearson\", \"kendall\")) {\n      coexp.matrix <- rcorr(t(datas), type = coexp.method)$r\n      \n    }\n    else if (coexp.method == \"euclid\") {\n      coexp.matrix <- 1 - (as.matrix(dist(datas))/max(dist(datas), \n                                                      na.rm = TRUE))\n    }\n    try(save(coexp.matrix, file = paste(getwd(), \"/\", results.dir, \n                                        \"/\", \"brut_coexp_matrix.RData\", sep = \"\"), compress = T))\n  }\n  if (build.annot.net | build.gene.net) {\n    sign.matrix <- coexp.matrix/abs(coexp.matrix)\n    coexp.matrix <- abs(coexp.matrix)\n    if (annot.clust.method %in% c(\"umilds\", \"spectral\")) {\n      if (!is.na(hard.th)) {\n        coexp.matrix[coexp.matrix >= hard.th] <- 1\n        coexp.matrix[coexp.matrix < hard.th] <- 0\n      }\n      else if (!is.na(soft.th)) {\n        coexp.matrix <- coexp.matrix^soft.th\n      }\n      if (topological) {\n        coexp.matrix <- 1 - .TOMdist(adjmat1 = coexp.matrix)\n      }\n      else if (keep.sign) {\n        coexp.matrix <- coexp.matrix * sign.matrix\n      }\n    }\n    else if (annot.clust.method == \"ucknn\" & !is.na(hard.th)) {\n      coexp.matrix[coexp.matrix < hard.th] <- 0\n    }\n    try(save(coexp.matrix, sign.matrix, parameter.list, file = paste(getwd(), \n                                                                     \"/\", results.dir, \"/\", \"gene_adj_matrix.RData\", sep = \"\")))\n  }\n  if (kegg) {\n    terms.name <- KEGG.terms.name\n    rownames(terms.name) <- terms.name[, 1]\n    file.annot <- annot.base[[org]]$KEGG.file.annot\n    taxoname <- \"KEGG\"\n    if (two.lists) {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = FALSE, results.dir = results.dir, \n                 alpha = alpha, locus.name = locus.name, annot.clust.method = annot.clust.method, \n                 up.frame = up.frame, down.frame = down.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = NA, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n    else {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = FALSE, results.dir = results.dir, \n                 annot.clust.method = annot.clust.method, alpha = alpha, \n                 locus.name = locus.name, genes.frame = genes.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = NA, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n  }\n  go.name <- c(\"GO Biological Process\", \"GO Cellular Component\", \n               \"GO Molecular Function\")\n  terms.name <- GO.terms.name\n  rownames(terms.name) <- terms.name[, 1]\n  if (go.bp) {\n    file.annot <- annot.base[[org]]$GO.DIR.BP.file.annot\n    taxoname <- go.name[1]\n    if (two.lists == TRUE) {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = TRUE, results.dir = results.dir, \n                 alpha = alpha, locus.name = locus.name, annot.clust.method = annot.clust.method, \n                 up.frame = up.frame, down.frame = down.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = level, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n    else {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = TRUE, results.dir = results.dir, \n                 annot.clust.method = annot.clust.method, alpha = alpha, \n                 locus.name = locus.name, genes.frame = genes.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = level, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n  }\n  if (go.cc) {\n    file.annot <- annot.base[[org]]$GO.DIR.CC.file.annot\n    taxoname <- go.name[2]\n    if (two.lists == TRUE) {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = TRUE, results.dir = results.dir, \n                 alpha = alpha, locus.name = locus.name, annot.clust.method = annot.clust.method, \n                 up.frame = up.frame, down.frame = down.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = level, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n    else {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = TRUE, results.dir = results.dir, \n                 annot.clust.method = annot.clust.method, alpha = alpha, \n                 locus.name = locus.name, genes.frame = genes.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = level, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n  }\n  if (go.mf) {\n    file.annot <- annot.base[[org]]$GO.DIR.MF.file.annot\n    taxoname <- go.name[3]\n    if (two.lists == TRUE) {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = TRUE, results.dir = results.dir, \n                 alpha = alpha, locus.name = locus.name, annot.clust.method = annot.clust.method, \n                 up.frame = up.frame, down.frame = down.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = level, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n    else {\n      .main.loop(file.annot = file.annot, taxoname = taxoname, \n                 annot.method = annot.method, terms.name = terms.name, \n                 direct = direct, fdr = fdr, go = TRUE, results.dir = results.dir, \n                 annot.clust.method = annot.clust.method, alpha = alpha, \n                 locus.name = locus.name, genes.frame = genes.frame, \n                 restrict = restrict, ref.list = ref.list, annot.details = annot.details, \n                 level = level, build.annot.net = build.annot.net, \n                 test.recovery = test.recovery, test.robust = test.robust, \n                 replace.annot = replace.annot, locus.symbol = locus.symbol, \n                 annot.prox.measure = annot.prox.measure, coexp.matrix = coexp.matrix, \n                 parameter.list = parameter.list, org = org, gene.net.details = gene.net.details, \n                 RV = RV, sigma = sigma, random.annot = random.annot)\n    }\n  }\n  if (build.gene.net & !is.null(coexp.matrix)) {\n    try(clusters <- .build.coexp.net(coexp.matrix = coexp.matrix, \n                                     locus.name = locus.name, locus.symbol = locus.symbol, \n                                     gene.clust.method = gene.clust.method, gene.clusters = gene.clusters))\n    try(save(clusters, parameter.list, file = paste(getwd(), \n                                                    \"/\", results.dir, \"/\", \"co-expression_clusters.RData\", \n                                                    sep = \"\"), compress = T))\n    net.matrix <- coexp.matrix\n    rownames(net.matrix) <- locus.symbol[rownames(net.matrix), \n                                         2]\n    colnames(net.matrix) <- locus.symbol[colnames(net.matrix), \n                                         2]\n    try(.cyto.sym(net.matrix = net.matrix, file.net = paste(getwd(), \n                                                            \"/\", results.dir, \"/\", \"co-expression_net.txt\", sep = \"\"), \n                  diagonal = FALSE, thresh = NULL))\n    rm(net.matrix)\n    try(centrality <- .genes.centrality(adj.matrix = coexp.matrix, \n                                        clusters = clusters, taxoname = taxoname, locus.symbol = locus.symbol, \n                                        results.dir = results.dir, coexp = TRUE))\n    if (two.lists) {\n      up.down <- rbind(matrix(1, nrow(up.frame), 1), matrix(0, \n                                                            nrow(down.frame), 1))\n      rownames(up.down) <- c(as.character(up.frame[, 1]), \n                             as.character(down.frame[, 1]))\n      try(write.table(cbind(rownames(clusters$gene.connect), \n                            as.vector(locus.symbol[rownames(clusters$gene.connect), \n                                                   2]), as.vector(locus.name[rownames(clusters$gene.connect), \n                                                                             2]), up.down, clusters$gene.connect, centrality[rownames(clusters$gene.connect), \n                                                                                                                             ]), file = paste(getwd(), \"/\", results.dir, \n                                                                                                                                              \"/\", \"co-expression_net_info.txt\", sep = \"\"), \n                      sep = \"\\t\", col.names = c(\"geneid\", \"symbol\", \n                                                \"name\", \"up(1)_down(0)\", colnames(clusters$gene.connect), \n                                                colnames(centrality)), row.names = F))\n      try(rm(clusters, up.down, centrality))\n    }\n    else {\n      try(write.table(cbind(rownames(clusters$gene.connect), \n                            as.vector(locus.symbol[rownames(clusters$gene.connect), \n                                                   2]), as.vector(locus.name[rownames(clusters$gene.connect), \n                                                                             2]), clusters$gene.connect, centrality[rownames(clusters$gene.connect), \n                                                                                                                    ]), file = paste(getwd(), \"/\", results.dir, \n                                                                                                                                     \"/\", \"co-expression_net_info.txt\", sep = \"\"), \n                      sep = \"\\t\", col.names = c(\"geneid\", \"symbol\", \n                                                \"name\", colnames(clusters$gene.connect), colnames(centrality)), \n                      row.names = F))\n      try(rm(clusters, centrality))\n    }\n    cat(paste(\"\\n\\tCo-expression net building finished... \", \n              date(), sep = \"\"))\n    rm()\n  }\n  if (!keep.rdata) {\n    try(unlink(paste(getwd(), \"/\", results.dir, \"/\", list.files(path = paste(getwd(), \n                                                                             \"/\", results.dir, \"/\", sep = \"\"), pattern = \"[:print:]*.RData\"), \n                     sep = \"\"), recursive = TRUE))\n  }\n  if (zip) {\n    try(system(command = paste(\"zip -r9q \", results.dir, \n                               \".zip \", \"./\", results.dir, \"/*\", sep = \"\")))\n    try(unlink(paste(getwd(), \"/\", results.dir, sep = \"\"), \n               recursive = TRUE))\n  }\n  cat(paste(\"\\n\\tEnd  of treatment at: \", date(), \"\\n\", sep = \"\"))\n  rm()\n}\n\n#function for analysis of genes expression based on classied subjects with Funnet\ngenes.updown.funnet<-function(genes,prode.entrez,high,low,stars,fileprefix,output.dir){\n  m<-mean(as.numeric(as.matrix(genes)))\n  res<-as.data.frame(rbind(c(\"Probe_ID\",\"High_Risk_Group\",\"Low_Risk_Group\"),cbind(colnames(genes),ifelse(colMeans(genes[high,])>m,1,0),ifelse(colMeans(genes[low,])>m,1,0))))\n  #high.up\n  ge.high.up<-res[rownames(res)%in%stars & res[,2]==1,]\n  high.up<-t(genes[,colnames(genes)%in%as.character(ge.high.up[,1])])\n  rownames(high.up)<-prode.entrez[prode.entrez[,1]%in%rownames(high.up),2]\n  high.up<-high.up[na.omit(rownames(high.up)),]\n  \n  #high.up\n  ge.high.up<-res[rownames(res)%in%stars & res[,2]==1,]\n  high.up<-t(genes[,colnames(genes)%in%as.character(ge.high.up[,1])])\n  rownames(high.up)<-prode.entrez[prode.entrez[,1]%in%rownames(high.up),2]\n  high.up<-high.up[na.omit(rownames(high.up)),]\n  \n  #high.up\n  ge.high.down<-res[rownames(res)%in%stars & res[,2]==0,]\n  high.down<-t(genes[,colnames(genes)%in%as.character(ge.high.down[,1])])\n  rownames(high.down)<-prode.entrez[prode.entrez[,1]%in%rownames(high.down),2]\n  high.down<-high.down[na.omit(rownames(high.down)),]\n  \n  #low.up\n  ge.low.up<-res[rownames(res)%in%stars & res[,3]==1,]\n  low.up<-t(genes[,colnames(genes)%in%as.character(ge.low.up[,1])])\n  rownames(low.up)<-prode.entrez[prode.entrez[,1]%in%rownames(low.up),2]\n  low.up<-low.up[na.omit(rownames(low.up)),]  \n  #low.down\n  ge.low.down<-res[rownames(res)%in%stars & res[,3]==0,]\n  low.down<-t(genes[,colnames(genes)%in%as.character(ge.low.down[,1])])\n  rownames(low.down)<-prode.entrez[prode.entrez[,1]%in%rownames(low.down),2]\n  low.down<-low.down[na.omit(rownames(low.down)),]\n  \n  high.refs<-c(rownames(high.up),rownames(high.down))\n  low.refs<-c(rownames(low.up),rownames(low.down))\n\n  high.up.frame<-as.data.frame(high.up)\n  colnames(high.up.frame)[1]<-\"GeneID\"\n  high.down.frame<-as.data.frame(high.down)\n  colnames(high.down.frame)[1]<-\"GeneID\"\n  \n  low.up.frame<-as.data.frame(low.up)\n  colnames(low.up.frame)[1]<-\"GeneID\"  \n  low.down.frame<-as.data.frame(low.down)\n  colnames(low.down.frame)[1]<-\"GeneID\"\n  \n\n  write.table(high.up,file=sprintf(\"%s/%s.high.up.genes.txt\",output.dir,fileprefix),col.names=F,row.names=T,sep=\"\\t\",quote=F)\n  write.table(high.down,file=sprintf(\"%s/%s.high.down.genes.txt\",output.dir,fileprefix),col.names=F,row.names=T,sep=\"\\t\",quote=F)\n  write.table(low.up,file=sprintf(\"%s/%s.low.up.genes.txt\",output.dir,fileprefix),col.names=F,row.names=T,sep=\"\\t\",quote=F)\n  write.table(low.down,file=sprintf(\"%s/%s.low.down.genes.txt\",output.dir,fileprefix),col.names=F,row.names=T,sep=\"\\t\",quote=F)\n  write.table(high.refs,file=sprintf(\"%s/%s.high.refs.genes.txt\",output.dir,fileprefix),col.names=F,row.names=F,sep=\"\\t\",quote=F)\n  write.table(low.refs,file=sprintf(\"%s/%s.low.refs.genes.txt\",output.dir,fileprefix),col.names=F,row.names=F,sep=\"\\t\",quote=F)\n  write.table(res,file=sprintf(\"%s/updown.genes.%s.txt\",output.dir,fileprefix),col.names=F,row.names=F,sep=\"\\t\",quote=F)\n  \n  \n  high.up.frame<-as.data.frame(read.table(sprintf(\"%s/%s.high.up.genes.txt\",output.dir,fileprefix),sep=\"\\t\",header=F))\n  high.down.frame<-as.data.frame(read.table(sprintf(\"%s/%s.high.down.genes.txt\",output.dir,fileprefix),sep=\"\\t\",header=F))\n  low.up.frame<-as.data.frame(read.table(sprintf(\"%s/%s.low.up.genes.txt\",output.dir,fileprefix),sep=\"\\t\",header=F))\n  low.down.frame<-as.data.frame(read.table(sprintf(\"%s/%s.low.down.genes.txt\",output.dir,fileprefix),sep=\"\\t\",header=F))\n    \n \n  fun(org=\"HS\", two.lists=TRUE, up.frame=high.up.frame, down.frame=high.down.frame,\n      genes.frame=NULL, restrict=TRUE, ref.list=data.frame(unique(ge.prode.entrez[,2])), logged=FALSE,\n      discriminant=TRUE, go.bp=TRUE, go.cc=TRUE, go.mf=TRUE, kegg=TRUE,\n      annot.method=\"specificity\", annot.details=TRUE,\n      direct=FALSE, enriched=TRUE, fdr=NA, build.annot.net=TRUE,\n      coexp.matrix=NULL, coexp.method=\"spearman\", estimate.th=FALSE,\n      hard.th=0.8, soft.th=NA, topological = FALSE, keep.sign=FALSE, level=1,\n      annot.clust.method=\"umilds\", annot.prox.measure=\"dynamical\",\n      test.recovery=FALSE, test.robust=FALSE, replace.annot=NA,\n      build.gene.net=TRUE, gene.clust.method=\"hclust\", gene.net.details=TRUE,\n      gene.clusters=NA, alpha=0.05, RV=0.90, sigma=NA, keep.rdata=FALSE, zip=TRUE,fileprefix=sprintf(\"%s.high.genes\",fileprefix))\n\n\n  fun(org=\"HS\", two.lists=TRUE, up.frame=low.up.frame, down.frame=low.down.frame,\n      genes.frame=NULL, restrict=TRUE, ref.list=data.frame(unique(ge.prode.entrez[,2])), logged=FALSE,\n      discriminant=TRUE, go.bp=TRUE, go.cc=TRUE, go.mf=TRUE, kegg=TRUE,\n      annot.method=\"specificity\", annot.details=TRUE,\n      direct=FALSE, enriched=TRUE, fdr=NA, build.annot.net=TRUE,\n      coexp.matrix=NULL, coexp.method=\"spearman\", estimate.th=FALSE,\n      hard.th=0.8, soft.th=NA, topological = FALSE, keep.sign=FALSE, level=1,\n      annot.clust.method=\"umilds\", annot.prox.measure=\"dynamical\",\n      test.recovery=FALSE, test.robust=FALSE, replace.annot=NA,\n      build.gene.net=TRUE, gene.clust.method=\"hclust\", gene.net.details=TRUE,\n      gene.clusters=NA, alpha=0.05, RV=0.90, sigma=NA, keep.rdata=FALSE, zip=TRUE,fileprefix=sprintf(\"%s.low.genes\",fileprefix))\n\n  \n  return(res)\n}\n\n\n\n#all gene expression matrix\nge.data<-read.table(sprintf(\"%s/data.d.all.txt\",input.dir),sep=\"\\t\",header=T)\nge.prode.entrez<-ge.data[,2:3]\n\n#T0 gene expression matrix\nge.data.t0<-get(load(sprintf(\"%s/GE_t0.RData\",input.dir)))\n\n#No NA - T0 gene expression matrix\n#ge.data.t0.nona<-na.omit(ge.data.t0)\nn.na<-sapply(1:ncol(ge.data.t0),function(x) sum(is.na(ge.data.t0[,x]))) \nge.data.t0.nona<-ge.data.t0[,which(n.na==0)]\n\n\n\n##############\n# LINEAR MODELS\n##############\n\n#genes by groups\nge.lm.classified.adfm.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Fat-mass_points.csv\",output.dir))\nge.lm.classified.wfmh2.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Waist_vs_Fat-mass_Height2_points.csv\",output.dir))\nge.lm.classified.adwh2.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Waist_Height2_points.csv\",output.dir))\nge.lm.classified.adfmh2.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Fat-mass_Height2_points.csv\",output.dir))\nge.lm.classified.adh2.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Height2_points.csv\",output.dir))\nge.lm.classified.adbmifma.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_BMI-Fat-mass-Age_points.csv\",output.dir))\n\n#genes by groups after testing\nge.lm.classified.adfm.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Fat-mass_auto-test.csv\",output.dir),sep=\";\")\nge.lm.classified.wfmh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Waist_vs_Fat-mass_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lm.classified.adwh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Waist_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lm.classified.adfmh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Fat-mass_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lm.classified.adh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lm.classified.adbmifma.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Adipocyte-diameter_vs_BMI-Fat-mass-Age_auto-test.csv\",output.dir),sep=\";\")\n\n#genes significantly different by groups\nge.lm.classified.adfm.t0.autotest.star<-ge.lm.classified.adfm.t0.autotest[ge.lm.classified.adfm.t0.autotest[,4]!=\"\",]\nge.lm.classified.wfmh2.t0.autotest.star<-ge.lm.classified.wfmh2.t0.autotest[ge.lm.classified.wfmh2.t0.autotest[,4]!=\"\",]\nge.lm.classified.adwh2.t0.autotest.star<-ge.lm.classified.adwh2.t0.autotest[ge.lm.classified.adwh2.t0.autotest[,4]!=\"\",]\nge.lm.classified.adfmh2.t0.autotest.star<-ge.lm.classified.adfmh2.t0.autotest[ge.lm.classified.adfmh2.t0.autotest[,4]!=\"\",]\nge.lm.classified.adh2.t0.autotest.star<-ge.lm.classified.adh2.t0.autotest[ge.lm.classified.adh2.t0.autotest[,4]!=\"\",]\nge.lm.classified.adbmifma.t0.autotest.star<-ge.lm.classified.adbmifma.t0.autotest[ge.lm.classified.adbmifma.t0.autotest[,4]!=\"\",]\n\n\n\n\n\n\n#analysis of genes expression based on classied subjects with Funnet\nupdown.genes.ge.lm.classified.wfmh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                            prode.entrez=ge.prode.entrez,\n                                                            high=which(ge.lm.classified.adfm.t0[,4]==0),\n                                                            low=which(ge.lm.classified.adfm.t0[,4]==1),\n                                                            stars=ge.lm.classified.adfm.t0.autotest.star[,1],\n                                                            fileprefix=\"ge.lm.classified.adfm.t0\",\n                                                            output.dir=output.dir)\nupdown.genes.ge.lm.classified.adwh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                            prode.entrez=ge.prode.entrez,\n                                                            high=which(ge.lm.classified.adwh2.t0[,4]==0),\n                                                            low=which(ge.lm.classified.adwh2.t0[,4]==1),\n                                                            stars=ge.lm.classified.adwh2.t0.autotest.star[,1],\n                                                            fileprefix=\"ge.lm.classified.adwh2.t0\",\n                                                            output.dir=output.dir)\nupdown.genes.ge.lm.classified.adfmh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                             prode.entrez=ge.prode.entrez,\n                                                             high=which(ge.lm.classified.adfmh2.t0[,4]==0),\n                                                             low=which(ge.lm.classified.adfmh2.t0[,4]==1),\n                                                             stars=ge.lm.classified.adfmh2.t0.autotest.star[,1],\n                                                             fileprefix=\"ge.lm.classified.adfmh2.t0\",\n                                                             output.dir=output.dir)\nupdown.genes.ge.lm.classified.adh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                           prode.entrez=ge.prode.entrez,\n                                                           high=which(ge.lm.classified.adh2.t0[,4]==0),\n                                                           low=which(ge.lm.classified.adh2.t0[,4]==1),\n                                                           stars=ge.lm.classified.adh2.t0.autotest.star[,1],\n                                                           fileprefix=\"ge.lm.classified.adh2.t0\",\n                                                           output.dir=output.dir)\nupdown.genes.ge.lm.classified.adbmifma.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                               prode.entrez=ge.prode.entrez,\n                                                               high=which(ge.lm.classified.adbmifma.t0[,4]==0),\n                                                               low=which(ge.lm.classified.adbmifma.t0[,4]==1),\n                                                               stars=ge.lm.classified.adbmifma.t0.autotest.star[,1],\n                                                               fileprefix=\"ge.lm.classified.adbmifma.t0\",\n                                                               output.dir=output.dir)\n\n\n\n\n\n\n\n\n##############\n# LOWESS\n##############\n\n\n#genes by groups\nge.lw.classified.adfm.t0<-read.csv(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Fat-mass_points.csv\",output.dir))\nge.lw.classified.adwh2.t0<-read.csv(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Waist_Height2_points.csv\",output.dir))\nge.lw.classified.adfmh2.t0<-read.csv(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Fat-mass_Height2_points.csv\",output.dir))\nge.lw.classified.adh2.t0<-read.csv(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Height2_points.csv\",output.dir))\nge.lw.classified.adbmifma.t0<-read.csv(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_BMI-Fat-mass-Age_points.csv\",output.dir))\n\n#genes by groups after testing\nge.lw.classified.adfm.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Fat-mass_auto-test.csv\",output.dir),sep=\";\")\nge.lw.classified.adwh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Waist_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lw.classified.adfmh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Fat-mass_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lw.classified.adh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lw.classified.adbmifma.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lw_t0_Adipocyte-diameter_vs_BMI-Fat-mass-Age_auto.csv\",output.dir),sep=\";\")\n\n#genes significantly different by groups\nge.lw.classified.adfm.t0.autotest.star<-ge.lw.classified.adfm.t0.autotest[ge.lw.classified.adfm.t0.autotest[,4]!=\"\",]\nge.lw.classified.adwh2.t0.autotest.star<-ge.lw.classified.adwh2.t0.autotest[ge.lw.classified.adwh2.t0.autotest[,4]!=\"\",]\nge.lw.classified.adfmh2.t0.autotest.star<-ge.lw.classified.adfmh2.t0.autotest[ge.lw.classified.adfmh2.t0.autotest[,4]!=\"\",]\nge.lw.classified.adh2.t0.autotest.star<-ge.lw.classified.adh2.t0.autotest[ge.lw.classified.adh2.t0.autotest[,4]!=\"\",]\nge.lw.classified.adbmifma.t0.autotest.star<-ge.lw.classified.adbmifma.t0.autotest[ge.lw.classified.adbmifma.t0.autotest[,4]!=\"\",]\n\n\n\n\n\n#analysis of genes expression based on classied subjects with Funnet\nupdown.genes.ge.lw.classified.adfm.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                     prode.entrez=ge.prode.entrez,\n                                                     high=which(ge.lw.classified.adfm.t0[,4]==0),\n                                                     low=which(ge.lw.classified.adfm.t0[,4]==1),\n                                                     stars=ge.lw.classified.adfm.t0.autotest.star[,1],\n                                                     fileprefix=\"ge.lw.classified.adfm.t0\",\n                                                     output.dir=output.dir)\nupdown.genes.ge.lw.classified.adwh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                     prode.entrez=ge.prode.entrez,\n                                                     high=which(ge.lw.classified.adwh2.t0[,4]==0),\n                                                     low=which(ge.lw.classified.adwh2.t0[,4]==1),\n                                                     stars=ge.lw.classified.adwh2.t0.autotest.star[,1],\n                                                     fileprefix=\"ge.lw.classified.adwh2.t0\",\n                                                     output.dir=output.dir)\nupdown.genes.ge.lw.classified.adfmh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                      prode.entrez=ge.prode.entrez,\n                                                      high=which(ge.lw.classified.adfmh2.t0[,4]==0),\n                                                      low=which(ge.lw.classified.adfmh2.t0[,4]==1),\n                                                      stars=ge.lw.classified.adfmh2.t0.autotest.star[,1],\n                                                      fileprefix=\"ge.lw.classified.adfmh2.t0\",\n                                                      output.dir=output.dir)\nupdown.genes.ge.lw.classified.adh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                    prode.entrez=ge.prode.entrez,\n                                                    high=which(ge.lw.classified.adh2.t0[,4]==0),\n                                                    low=which(ge.lw.classified.adh2.t0[,4]==1),\n                                                    stars=ge.lw.classified.adh2.t0.autotest.star[,1],\n                                                    fileprefix=\"ge.lw.classified.adh2.t0\",\n                                                    output.dir=output.dir)\nupdown.genes.ge.lw.classified.adbmifma.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                        prode.entrez=ge.prode.entrez,\n                                                        high=which(ge.lw.classified.adbmifma.t0[,4]==0),\n                                                        low=which(ge.lw.classified.adbmifma.t0[,4]==1),\n                                                        stars=ge.lw.classified.adbmifma.t0.autotest.star[,1],\n                                                        fileprefix=\"ge.lw.classified.adbmifma.t0\",\n                                                        output.dir=output.dir)\n\n\nge.lm.classified.wfmh2.t0<-read.csv(sprintf(\"%s/ge-nona_lm_t0_Waist_vs_Fat-mass_Height2_points.csv\",output.dir))\nge.lm.classified.wfmh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lm_t0_Waist_vs_Fat-mass_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lm.classified.wfmh2.t0.autotest.star<-ge.lm.classified.wfmh2.t0.autotest[ge.lm.classified.wfmh2.t0.autotest[,4]!=\"\",]\n\nupdown.genes.ge.lm.classified.wfmh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                            prode.entrez=ge.prode.entrez,\n                                                            high=which(ge.lm.classified.wfmh2.t0[,4]==0),\n                                                            low=which(ge.lm.classified.wfmh2.t0[,4]==1),\n                                                            stars=ge.lm.classified.wfmh2.t0.autotest.star[,1],\n                                                            fileprefix=\"ge.lm.classified.wfmh2.t0\",\n                                                            output.dir=output.dir)\n\n\n\nge.lw.classified.wfmh2.t0<-read.csv(sprintf(\"%s/ge-nona_lw_t0_Waist_vs_Fat-mass_Height2_points.csv\",output.dir))\nge.lw.classified.wfmh2.t0.autotest<-read.table(sprintf(\"%s/ge-nona_lw_t0_Waist_vs_Fat-mass_Height2_auto-test.csv\",output.dir),sep=\";\")\nge.lw.classified.wfmh2.t0.autotest.star<-ge.lw.classified.wfmh2.t0.autotest[ge.lw.classified.wfmh2.t0.autotest[,4]!=\"\",]\n\nupdown.genes.ge.lw.classified.wfmh2.t0<-genes.updown.funnet(genes=ge.data.t0.nona,\n                                                            prode.entrez=ge.prode.entrez,\n                                                            high=which(ge.lw.classified.wfmh2.t0[,4]==0),\n                                                            low=which(ge.lw.classified.wfmh2.t0[,4]==1),\n                                                            stars=ge.lw.classified.wfmh2.t0.autotest.star[,1],\n                                                            fileprefix=\"ge.lw.classified.wfmh2.t0\",\n                                                            output.dir=output.dir)\n\n#Checking UP-DOWN\nm<-mean(as.numeric(as.matrix(ge.data.t0.nona)))\nupdown<-cbind(colnames(ge.data.t0.nona),colMeans(ge.data.t0.nona[which(ge.lm.classified.adbmifma.t0[,4]==1),]),colMeans(ge.data.t0.nona[which(ge.lm.classified.adbmifma.t0[,4]==0),]),ifelse(colMeans(ge.data.t0.nona[which(ge.lm.classified.adbmifma.t0[,4]==1),])>m,1,0),ifelse(colMeans(ge.data.t0.nona[which(ge.lm.classified.adbmifma.t0[,4]==0),])>m,1,0))\n\n",
    "created" : 1371141788012.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1333281268",
    "id" : "5EAA413B",
    "lastKnownWriteTime" : 1374047627,
    "path" : "~/metacardis/7.scripts/released/svn/mc-r/trunk/genes_exepression_funnet.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}