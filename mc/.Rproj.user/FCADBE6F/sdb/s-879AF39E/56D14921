{
    "contents" : "library(MASS)  \n \ndiff.test<-function(x,y,method=\"chi2\"){\n  tbl<-table(x, y)\n  if (method==\"chi2\")\n    return(chisq.test(tbl))\n}\n\n# Log-likelihood tests of independence & goodness of fit\n# Does Williams' and Yates' correction\n# does Monte Carlo simulation of p-values, via gtestsim.c\n#\n# G & q calculation from Sokal & Rohlf (1995) Biometry 3rd ed.\n# TOI Yates' correction taken from Mike Camann's 2x2 G-test fn.\n# GOF Yates' correction as described in Zar (2000)\n# more stuff taken from ctest's chisq.test()\n#\n# V3.3 Pete Hurd Sept 29 2001. phurd@ualberta.ca\n# Source: http://www.stat.wisc.edu/~st571-1/gtest.R\n\ng.test <- function(x, y = NULL, correct=\"williams\",\n                   p = rep(1/length(x), length(x)), simulate.p.value = FALSE, B = 2000)\n  #can also use correct=\"none\" or correct=\"yates\"\n{\n  DNAME <- deparse(substitute(x))\n  if (is.data.frame(x)) x <- as.matrix(x)\n  if (is.matrix(x)) {\n    if (min(dim(x)) == 1) \n      x <- as.vector(x)\n  }\n  if (!is.matrix(x) && !is.null(y)) {\n    if (length(x) != length(y)) \n      stop(\"x and y must have the same length\")\n    DNAME <- paste(DNAME, \"and\", deparse(substitute(y)))\n    OK <- complete.cases(x, y)\n    x <- as.factor(x[OK])\n    y <- as.factor(y[OK])\n    if ((nlevels(x) < 2) || (nlevels(y) < 2)) \n      stop(\"x and y must have at least 2 levels\")\n    x <- table(x, y)\n  }\n  if (any(x < 0) || any(is.na(x))) \n    stop(\"all entries of x must be nonnegative and finite\")\n  if ((n <- sum(x)) == 0) \n    stop(\"at least one entry of x must be positive\")\n  #If x is matrix, do test of independence\n  if (is.matrix(x)) {\n    #Test of Independence\n    nrows<-nrow(x)\n    ncols<-ncol(x)\n    if (correct==\"yates\"){ # Do Yates' correction?\n      if(dim(x)[1]!=2 || dim(x)[2]!=2) # check for 2x2 matrix\n        stop(\"Yates' correction requires a 2 x 2 matrix\")\n      if((x[1,1]*x[2,2])-(x[1,2]*x[2,1]) > 0)\n      {\n        x[1,1] <- x[1,1] - 0.5\n        x[2,2] <- x[2,2] - 0.5\n        x[1,2] <- x[1,2] + 0.5\n        x[2,1] <- x[2,1] + 0.5\n      }\n      else\n      {\n        x[1,1] <- x[1,1] + 0.5\n        x[2,2] <- x[2,2] + 0.5\n        x[1,2] <- x[1,2] - 0.5\n        x[2,1] <- x[2,1] - 0.5\n      }\n    }\n    \n    sr <- apply(x,1,sum)\n    sc <- apply(x,2,sum)\n    E <- outer(sr,sc, \"*\")/n\n    # are we doing a monte-carlo?\n    # no monte carlo GOF?\n    if (simulate.p.value){\n      METHOD <- paste(\"Log likelihood ratio (G-test) test of independence\\n\\t with simulated p-value based on\", B, \"replicates\")\n      tmp <- .C(\"gtestsim\", as.integer(nrows), as.integer(ncols),\n                as.integer(sr), as.integer(sc), as.integer(n), as.integer(B),\n                as.double(E), integer(nrows * ncols), double(n+1),\n                integer(ncols), results=double(B), PACKAGE= \"ctest\")\n      g <- 0\n      for (i in 1:nrows){\n        for (j in 1:ncols){\n          if (x[i,j] != 0) g <- g + x[i,j] * log(x[i,j]/E[i,j])\n        }\n      }\n      STATISTIC <- G <- 2 * g\n      PARAMETER <- NA\n      PVAL <- sum(tmp$results >= STATISTIC)/B\n    }\n    else {\n      # no monte-carlo\n      # calculate G\n      g <- 0\n      for (i in 1:nrows){\n        for (j in 1:ncols){\n          if (x[i,j] != 0) g <- g + x[i,j] * log(x[i,j]/E[i,j])\n        }\n      }\n      q <- 1\n      if (correct==\"williams\"){ # Do Williams' correction\n        row.tot <- col.tot <- 0    \n        for (i in 1:nrows){ row.tot <- row.tot + 1/(sum(x[i,])) }\n        for (j in 1:ncols){ col.tot <- col.tot + 1/(sum(x[,j])) }\n        q <- 1+ ((n*row.tot-1)*(n*col.tot-1))/(6*n*(ncols-1)*(nrows-1))\n      }\n      STATISTIC <- G <- 2 * g / q\n      PARAMETER <- (nrow(x)-1)*(ncol(x)-1)\n      PVAL <- 1-pchisq(STATISTIC,df=PARAMETER)\n      if(correct==\"none\")\n        METHOD <- \"Log likelihood ratio (G-test) test of independence without correction\"\n      if(correct==\"williams\")\n        METHOD <- \"Log likelihood ratio (G-test) test of independence with Williams' correction\"\n      if(correct==\"yates\")\n        METHOD <- \"Log likelihood ratio (G-test) test of independence with Yates' correction\"\n    }\n  }\n  else {\n    # x is not a matrix, so we do Goodness of Fit\n    METHOD <- \"Log likelihood ratio (G-test) goodness of fit test\"\n    if (length(x) == 1) \n      stop(\"x must at least have 2 elements\")\n    if (length(x) != length(p)) \n      stop(\"x and p must have the same number of elements\")\n    E <- n * p\n    \n    if (correct==\"yates\"){ # Do Yates' correction\n      if(length(x)!=2)\n        stop(\"Yates' correction requires 2 data values\")\n      if ( (x[1]-E[1]) > 0.25) {\n        x[1] <- x[1]-0.5\n        x[2] <- x[2]+0.5\n      }\n      else if ( (E[1]-x[1]) > 0.25){\n        x[1] <- x[1]+0.5\n        x[2] <- x[2]-0.5\n      }\n    }\n    names(E) <- names(x)\n    g <- 0\n    for (i in 1:length(x)){\n      if (x[i] != 0) g <- g + x[i] * log(x[i]/E[i])\n    }\n    q <- 1\n    if (correct==\"williams\"){ # Do Williams' correction\n      q <- 1+(length(x)+1)/(6*n)\n    }\n    STATISTIC <- G <- 2*g/q\n    PARAMETER <- length(x) - 1\n    PVAL <- pchisq(STATISTIC, PARAMETER, lower = FALSE)\n  }\n  names(STATISTIC) <- \"Log likelihood ratio statistic (G)\"\n  names(PARAMETER) <- \"X-squared df\"\n  names(PVAL) <- \"p.value\"\n  structure(list(statistic=STATISTIC,parameter=PARAMETER,p.value=PVAL,\n                 method=METHOD,data.name=DNAME, observed=x, expected=E),\n            class=\"htest\")\n}\n\n#Test of independence\n#REFS: http://www.pmc.ucsc.edu/~mclapham/Rtips/categorical.htm\n\nind.test<-function(x,y,method=\"chi2\"){\n  \n  tbl<-table(x, y)\n  \n  if (length(x)<5 & length(y)<5 )\n    method=\"g\"\n  else if (nrow(tbl)==2 & ncol(tbl)==2 )\n    method=\"fisher\"\n  else method=\"chi2\"\n  \n  \n  if (method==\"chi2\")\n    return(chisq.test(tbl))\n  if (method==\"g\")\n    return(g.test(tbl))\n  if (method==\"fisher\")\n    return(fisher.test(tbl))  \n  \n}\n\nind.test(survey$Smoke, survey$Exer)\nhttp://www.ykhoa.net/baigiang/lamsangthongke/lstk05_kiemdinht.pdf\n\n",
    "created" : 1374584316992.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2499641425",
    "id" : "56D14921",
    "lastKnownWriteTime" : 1374596412,
    "path" : "~/metacardis/7.scripts/released/svn/mc-r/trunk/TestingLib.R",
    "properties" : {
        "tempName" : "Untitled6"
    },
    "source_on_save" : false,
    "type" : "r_source"
}